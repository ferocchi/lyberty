---
description: form
globs:
alwaysApply: false
---

# Universal Form System Architecture

## Overview

This project uses a universal, hyper-performant form system based on the components and patterns in [src/components/Form/](mdc:src/components/Form). All advanced forms should use this system for consistency, extensibility, and performance.

## Core Files

- [src/components/Form/types.ts](mdc:src/components/Form/types.ts): Core types (`FormType`, `FormStepType`, `FormState`, etc.)
- [src/components/Form/context.tsx](mdc:src/components/Form/context.tsx): Jotai-based context, state management, and provider
- [src/components/Form/utils.ts](mdc:src/components/Form/utils.ts): Utility functions for state, navigation, and validation
- [src/components/Form/validation.ts](mdc:src/components/Form/validation.ts): Centralized, extensible validation system
- [src/components/Form/MultiStepForm.tsx](mdc:src/components/Form/MultiStepForm.tsx): Multi-step form rendering and navigation

## Key Patterns

- **All form configs must use `FormType` and each step must use `FormStepType` with an `id` field.**
- State is managed with Jotai atoms, split by form, step, and field for fine-grained reactivity.
- Validation is centralized and extensible, supporting async and schema-based rules.
- Multi-step navigation, conditional logic, and branching are supported out of the box.
- Atoms can be persisted to localStorage or server for draft saving and restoration.
- Supports optimistic updates, server actions, and Next.js 15+ streaming patterns.
- Custom field components and async validation are easily integrated.

## Example Config

See [app/(public)/form5/formConfig.tsx](<mdc:app/(public)/form5/formConfig.tsx>) for a correct, universal form config using `FormType` and step/field `id`s.

## Migration Strategy

1. **Audit all form configs** and update to use `FormType` and `FormStepType` with `id` fields.
2. **Replace custom atoms/context** with the shared context and atoms from [src/components/Form/context.tsx](mdc:src/components/Form/context.tsx).
3. **Update all usages** of form state, validation, and navigation to use the shared system.
4. **Test all forms** for performance, validation, and accessibility.
5. **Document** the universal form system for future contributors.

## When to Use Other Systems

- For simple, flat forms, you may use [src/components/ui/Form.tsx](mdc:src/components/ui/Form.tsx) (React Hook Form integration).
- For all multi-step, dynamic, or advanced forms, use the universal system.

## Performance & Extensibility

- Jotai atoms ensure minimal re-renders and high performance.
- Centralized validation and navigation logic for maintainability.
- Easily supports new field types, async validation, and server-driven flows.

## References

- [src/components/Form/types.ts](mdc:src/components/Form/types.ts)
- [src/components/Form/context.tsx](mdc:src/components/Form/context.tsx)
- [src/components/Form/utils.ts](mdc:src/components/Form/utils.ts)
- [src/components/Form/validation.ts](mdc:src/components/Form/validation.ts)
- [src/components/Form/MultiStepForm.tsx](mdc:src/components/Form/MultiStepForm.tsx)
- [app/(public)/form5/formConfig.tsx](<mdc:app/(public)/form5/formConfig.tsx>)
