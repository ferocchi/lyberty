---
alwaysApply: true
---

# Modern Next.js Data Fetching Patterns

## Overview

This project uses modern Next.js 15+ patterns for data fetching and state management. All API routes (except auth) have been migrated to Server Actions using [lib/safe-action.ts](mdc:lib/safe-action.ts).

## Data Fetching Hierarchy (Best to Worst)

### 1. Server Components with Direct Fetching (Best)

Use for initial page loads and static data:

```typescript
// ✅ GOOD: Server Component with direct data fetching
export default async function DashboardPage() {
  const session = await auth();
  const googleAdsData = await getUserGoogleAdsData(session.user.id);

  return (
    <div>
      <DashboardMetrics data={googleAdsData} />
      <GoogleAdsAccountSelector initialAccounts={googleAdsData.accounts} />
    </div>
  );
}
```

### 2. Server Actions with `useAction` (Best for mutations)

Use for user interactions and data updates:

```typescript
"use client";
import { useAction } from "next-safe-action/hooks";
import { selectGoogleAdsAccount } from "@/app/actions";

export function AccountSelector() {
  const { execute, result, status } = useAction(selectGoogleAdsAccount);

  const handleSelect = (accountId: string) => {
    execute({ accountId });
  };

  return (
    <Select onValueChange={handleSelect} disabled={status === "executing"}>
      {/* options */}
    </Select>
  );
}
```

### 3. React's `use()` Hook (Best for streaming)

Use for conditional data fetching and streaming:

```typescript
"use client";
import { use } from "react";

export function GoogleAdsAccountSelector() {
  const accountsPromise = getGoogleAdsAccounts({});
  const accounts = use(accountsPromise);

  return <Select>{/* render accounts */}</Select>;
}
```

### 4. Custom Hooks with SWR/TanStack Query (Best for real-time)

Use only when you need frequent updates or complex caching:

```typescript
import useSWR from "swr";

export function useGoogleAdsAccounts() {
  const { data, error, mutate } = useSWR(
    "google-ads-accounts",
    () => getGoogleAdsAccounts({}),
    { refreshInterval: 30000 }
  );

  return {
    accounts: data?.data?.accounts || [],
    error,
    isLoading: !data && !error,
  };
}
```

### 5. useEffect (Avoid - Last Resort)

Only use for browser-only APIs or when no other pattern works:

```typescript
// ❌ AVOID: Traditional useEffect pattern
useEffect(() => {
  fetchData();
}, []);
```

---

# Backend API Architecture

## Overview

Lyberty is a comprehensive AI engine platform built with Next.js 15+, featuring modern Server Actions, Drizzle ORM, and multiple third-party integrations. The backend architecture follows a serverless-first approach with robust data management and real-time capabilities.

## Core Architecture

### Server Actions Pattern

All business logic is implemented as Server Actions using the modern Next.js 15+ pattern:

#### Authentication Actions

- `signIn()` - User authentication with multiple providers
- `signOut()` - User logout and session cleanup
- `refreshToken()` - Token refresh and session management

#### User Management

- `createUser()` - User registration and profile creation
- `updateUser()` - Profile updates and preferences
- `deleteUser()` - Account deletion and data cleanup

#### Data Management

- `createRecord()` - Generic record creation with validation
- `updateRecord()` - Record updates with optimistic updates
- `deleteRecord()` - Soft/hard delete with cascade handling
- `queryRecords()` - Advanced querying with filters and pagination

#### File Operations

- `uploadFile()` - File upload with validation and processing
- `deleteFile()` - File deletion with cleanup
- `generatePresignedUrl()` - Secure file access URLs

### Database Schema

#### Core Tables

```sql
-- Users and authentication
users (id, email, name, avatar, created_at, updated_at)
sessions (id, user_id, expires_at, created_at)
accounts (id, user_id, provider, provider_account_id)

-- Application data
companies (id, name, domain, settings, created_at)
projects (id, company_id, name, description, status)
experiments (id, project_id, name, status, config)

-- Analytics and tracking
events (id, user_id, session_id, name, data, timestamp)
metrics (id, experiment_id, metric_name, value, timestamp)
```

### API Integration Patterns

#### Google Integration

- **OAuth Flow**: Secure authentication with Google APIs
- **Analytics**: Google Analytics 4 integration
- **Ads**: Google Ads API for campaign management
- **Drive**: File storage and document management

#### Facebook Integration

- **OAuth**: Facebook login and authentication
- **Ads**: Facebook Ads API integration
- **Social**: Social media sharing and engagement

#### Shopify Integration

- **E-commerce**: Product and order data synchronization
- **Webhooks**: Real-time data updates
- **Analytics**: Sales and conversion tracking

#### Cloudflare Integration

- **Hostname Management**: [src/lib/api/cloudflareHostname.ts](mdc:src/lib/api/cloudflareHostname.ts)
- **KV Storage**: Real-time configuration and caching
- **R2 Storage**: Object storage for files and assets
- **Workers**: Edge computing for performance

### Cloudflare R2 Storage

File storage operations in [src/lib/api/r2.ts](mdc:src/lib/api/r2.ts):

```typescript
export async function uploadToR2(file: File, path: string): Promise<string>;
export async function deleteFromR2(path: string): Promise<boolean>;
export async function getR2Url(path: string): Promise<string>;
```

### Cloudflare KV Storage

Configuration and caching in [src/lib/api/kv.ts](mdc:src/lib/api/kv.ts):

```typescript
export async function getKVValue(key: string): Promise<any>;
export async function setKVValue(key: string, value: any): Promise<void>;
export async function deleteKVValue(key: string): Promise<void>;
```

## Security Patterns

### Authentication & Authorization

- **JWT Tokens**: Secure session management
- **Role-Based Access**: Company and project-level permissions
- **API Rate Limiting**: Protection against abuse
- **Input Validation**: Zod schemas for all inputs

### Data Protection

- **Encryption**: Sensitive data encryption at rest
- **Audit Logging**: Complete audit trail for all operations
- **Data Retention**: Configurable data retention policies
- **GDPR Compliance**: Data privacy and user rights

## Performance Optimization

### Caching Strategy

- **Redis**: Session and user data caching
- **Cloudflare KV**: Configuration and feature flags
- **CDN**: Static asset delivery optimization
- **Database**: Query optimization and indexing

### Database Optimization

- **Connection Pooling**: Efficient database connections
- **Query Optimization**: Indexed queries and efficient joins
- **Read Replicas**: Scaling read operations
- **Data Archiving**: Historical data management

## Error Handling

### Standardized Error Responses

```typescript
interface ApiError {
  code: string;
  message: string;
  details?: any;
  timestamp: string;
}
```

### Error Categories

- **Validation Errors**: Input validation failures
- **Authentication Errors**: Auth and permission issues
- **Business Logic Errors**: Domain-specific rule violations
- **System Errors**: Infrastructure and technical issues

## Monitoring & Analytics

### Application Monitoring

- **Error Tracking**: Sentry integration for error monitoring
- **Performance Monitoring**: Core Web Vitals and API response times
- **User Analytics**: User behavior and feature usage
- **Business Metrics**: Conversion rates and key performance indicators

### Infrastructure Monitoring

- **Database Performance**: Query performance and connection health
- **API Usage**: Rate limiting and usage patterns
- **Storage Metrics**: R2 and KV usage monitoring
- **Cost Optimization**: Resource usage and cost tracking

## Development Workflow

### Local Development

1. **Database Setup**: Local PostgreSQL with migrations
2. **Environment Variables**: Configure local development settings
3. **API Testing**: Postman/Insomnia collections for testing
4. **Mock Services**: Local mocks for external APIs

### Testing Strategy

- **Unit Tests**: Individual function and component testing
- **Integration Tests**: API endpoint and database testing
- **E2E Tests**: Complete user workflow testing
- **Performance Tests**: Load testing and performance validation

## Deployment & Infrastructure

### Cloudflare Pages Deployment

- **Automatic Deployments**: Git-based deployment pipeline
- **Environment Management**: Staging and production environments
- **Rollback Capability**: Quick rollback to previous versions
- **Performance Monitoring**: Real-time performance tracking

### Database Management

- **Migrations**: Automated database schema updates
- **Backups**: Automated backup and recovery procedures
- **Scaling**: Horizontal and vertical scaling strategies
- **Monitoring**: Database health and performance monitoring

## API Documentation

### OpenAPI Specification

- **Swagger UI**: Interactive API documentation
- **Type Definitions**: TypeScript types for all endpoints
- **Example Requests**: Sample requests and responses
- **Error Codes**: Comprehensive error code documentation

### SDK Generation

- **TypeScript SDK**: Auto-generated client libraries
- **React Hooks**: Custom hooks for API integration
- **Error Handling**: Consistent error handling patterns
- **Type Safety**: Full TypeScript support for all operations

## Best Practices

### Data Fetching

1. **Use Server Components** for initial data loading
2. **Use Server Actions** for mutations and user interactions
3. **Implement proper caching** strategies
4. **Handle loading and error states** gracefully
5. **Use optimistic updates** for better UX

### API Design

1. **Follow RESTful principles** for API design
2. **Use consistent error responses** across all endpoints
3. **Implement proper validation** for all inputs
4. **Use pagination** for large datasets
5. **Version APIs** for backward compatibility

### Performance

1. **Optimize database queries** with proper indexing
2. **Use connection pooling** for database connections
3. **Implement caching** at multiple levels
4. **Monitor performance metrics** continuously
5. **Use CDN** for static assets

### Security

1. **Validate all inputs** using Zod schemas
2. **Implement proper authentication** and authorization
3. **Use HTTPS** for all communications
4. **Encrypt sensitive data** at rest and in transit
5. **Implement rate limiting** to prevent abuse

## References

- [Next.js Data Fetching Documentation](https://nextjs.org/docs/app/building-your-application/data-fetching)
- [Server Actions Documentation](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions)
- [React use() Hook Documentation](https://react.dev/reference/react/use)
- [SWR Documentation](https://swr.vercel.app/)
- [TanStack Query Documentation](https://tanstack.com/query/latest)
  description:
  globs:
  alwaysApply: false

---
